{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with default config\nexport const api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle errors globally\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response;\n  // Handle 401 errors globally\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// ML Prediction API\nexport const mlApi = {\n  predict: async symptoms => {\n    const response = await api.post('/ml/predict', {\n      symptoms\n    });\n    return response.data;\n  },\n  getSymptoms: async () => {\n    const response = await api.get('/ml/symptoms/list');\n    return response.data;\n  },\n  searchSymptoms: async (query, limit = 10) => {\n    const response = await api.get(`/ml/symptoms/search?q=${query}&limit=${limit}`);\n    return response.data;\n  },\n  getDiseases: async () => {\n    const response = await api.get('/ml/diseases/list');\n    return response.data;\n  },\n  validateSymptoms: async symptoms => {\n    const response = await api.post('/ml/validate-symptoms', {\n      symptoms\n    });\n    return response.data;\n  },\n  getModelInfo: async () => {\n    const response = await api.get('/ml/model/info');\n    return response.data;\n  },\n  healthCheck: async () => {\n    const response = await api.get('/ml/health');\n    return response.data;\n  }\n};\n\n// Auth API\nexport const authApi = {\n  login: async (email, password) => {\n    const response = await api.post('/auth/login', {\n      email,\n      password\n    });\n    return response.data;\n  },\n  demoLogin: async () => {\n    const response = await api.post('/auth/demo-login', {\n      email: 'demo@medicine.com',\n      password: 'demo123'\n    });\n    return response.data;\n  },\n  register: async userData => {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n  getProfile: async () => {\n    const response = await api.get('/auth/profile');\n    return response.data;\n  },\n  updateProfile: async userData => {\n    const response = await api.put('/auth/profile', userData);\n    return response.data;\n  },\n  validateToken: async () => {\n    const response = await api.get('/auth/validate-token');\n    return response.data;\n  }\n};\n\n// Health API\nexport const healthApi = {\n  check: async () => {\n    const response = await api.get('/health');\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","mlApi","predict","symptoms","post","data","getSymptoms","get","searchSymptoms","query","limit","getDiseases","validateSymptoms","getModelInfo","healthCheck","authApi","login","email","password","demoLogin","register","userData","getProfile","updateProfile","put","validateToken","healthApi","check"],"sources":["C:/Users/LUCKY/Downloads/Medicine-Prediction-System - Copy/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with default config\r\nexport const api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle errors globally\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Handle 401 errors globally\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// ML Prediction API\r\nexport const mlApi = {\r\n  predict: async (symptoms) => {\r\n    const response = await api.post('/ml/predict', { symptoms });\r\n    return response.data;\r\n  },\r\n\r\n  getSymptoms: async () => {\r\n    const response = await api.get('/ml/symptoms/list');\r\n    return response.data;\r\n  },\r\n\r\n  searchSymptoms: async (query, limit = 10) => {\r\n    const response = await api.get(`/ml/symptoms/search?q=${query}&limit=${limit}`);\r\n    return response.data;\r\n  },\r\n\r\n  getDiseases: async () => {\r\n    const response = await api.get('/ml/diseases/list');\r\n    return response.data;\r\n  },\r\n\r\n  validateSymptoms: async (symptoms) => {\r\n    const response = await api.post('/ml/validate-symptoms', { symptoms });\r\n    return response.data;\r\n  },\r\n\r\n  getModelInfo: async () => {\r\n    const response = await api.get('/ml/model/info');\r\n    return response.data;\r\n  },\r\n\r\n  healthCheck: async () => {\r\n    const response = await api.get('/ml/health');\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Auth API\r\nexport const authApi = {\r\n  login: async (email, password) => {\r\n    const response = await api.post('/auth/login', { email, password });\r\n    return response.data;\r\n  },\r\n\r\n  demoLogin: async () => {\r\n    const response = await api.post('/auth/demo-login', {\r\n      email: 'demo@medicine.com',\r\n      password: 'demo123'\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  register: async (userData) => {\r\n    const response = await api.post('/auth/register', userData);\r\n    return response.data;\r\n  },\r\n\r\n  getProfile: async () => {\r\n    const response = await api.get('/auth/profile');\r\n    return response.data;\r\n  },\r\n\r\n  updateProfile: async (userData) => {\r\n    const response = await api.put('/auth/profile', userData);\r\n    return response.data;\r\n  },\r\n\r\n  validateToken: async () => {\r\n    const response = await api.get('/auth/validate-token');\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Health API\r\nexport const healthApi = {\r\n  check: async () => {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}