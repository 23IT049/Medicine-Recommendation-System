{"ast":null,"code":"import axios from'axios';// Create axios instance with default config\nexport const api=axios.create({baseURL:process.env.REACT_APP_API_URL||'http://localhost:5000/api',timeout:10000,headers:{'Content-Type':'application/json'}});// Request interceptor to add auth token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});// Response interceptor to handle errors globally\napi.interceptors.response.use(response=>{return response;},error=>{var _error$response;// Handle 401 errors globally\nif(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){localStorage.removeItem('token');window.location.href='/login';}return Promise.reject(error);});// ML Prediction API\nexport const mlApi={predict:async symptoms=>{const response=await api.post('/ml/predict',{symptoms});return response.data;},getSymptoms:async()=>{const response=await api.get('/ml/symptoms/list');return response.data;},searchSymptoms:async function(query){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;const response=await api.get(\"/ml/symptoms/search?q=\".concat(query,\"&limit=\").concat(limit));return response.data;},getDiseases:async()=>{const response=await api.get('/ml/diseases/list');return response.data;},validateSymptoms:async symptoms=>{const response=await api.post('/ml/validate-symptoms',{symptoms});return response.data;},getModelInfo:async()=>{const response=await api.get('/ml/model/info');return response.data;},healthCheck:async()=>{const response=await api.get('/ml/health');return response.data;}};// Auth API\nexport const authApi={login:async(email,password)=>{const response=await api.post('/auth/login',{email,password});return response.data;},demoLogin:async()=>{const response=await api.post('/auth/demo-login',{email:'demo@medicine.com',password:'demo123'});return response.data;},register:async userData=>{const response=await api.post('/auth/register',userData);return response.data;},getProfile:async()=>{const response=await api.get('/auth/profile');return response.data;},updateProfile:async userData=>{const response=await api.put('/auth/profile',userData);return response.data;},validateToken:async()=>{const response=await api.get('/auth/validate-token');return response.data;}};// Health API\nexport const healthApi={check:async()=>{const response=await api.get('/health');return response.data;}};export default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","mlApi","predict","symptoms","post","data","getSymptoms","get","searchSymptoms","query","limit","arguments","length","undefined","getDiseases","validateSymptoms","getModelInfo","healthCheck","authApi","login","email","password","demoLogin","register","userData","getProfile","updateProfile","put","validateToken","healthApi","check"],"sources":["C:/Users/LUCKY/Downloads/Medicine-Prediction-System - Copy/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with default config\r\nexport const api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle errors globally\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Handle 401 errors globally\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// ML Prediction API\r\nexport const mlApi = {\r\n  predict: async (symptoms) => {\r\n    const response = await api.post('/ml/predict', { symptoms });\r\n    return response.data;\r\n  },\r\n\r\n  getSymptoms: async () => {\r\n    const response = await api.get('/ml/symptoms/list');\r\n    return response.data;\r\n  },\r\n\r\n  searchSymptoms: async (query, limit = 10) => {\r\n    const response = await api.get(`/ml/symptoms/search?q=${query}&limit=${limit}`);\r\n    return response.data;\r\n  },\r\n\r\n  getDiseases: async () => {\r\n    const response = await api.get('/ml/diseases/list');\r\n    return response.data;\r\n  },\r\n\r\n  validateSymptoms: async (symptoms) => {\r\n    const response = await api.post('/ml/validate-symptoms', { symptoms });\r\n    return response.data;\r\n  },\r\n\r\n  getModelInfo: async () => {\r\n    const response = await api.get('/ml/model/info');\r\n    return response.data;\r\n  },\r\n\r\n  healthCheck: async () => {\r\n    const response = await api.get('/ml/health');\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Auth API\r\nexport const authApi = {\r\n  login: async (email, password) => {\r\n    const response = await api.post('/auth/login', { email, password });\r\n    return response.data;\r\n  },\r\n\r\n  demoLogin: async () => {\r\n    const response = await api.post('/auth/demo-login', {\r\n      email: 'demo@medicine.com',\r\n      password: 'demo123'\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  register: async (userData) => {\r\n    const response = await api.post('/auth/register', userData);\r\n    return response.data;\r\n  },\r\n\r\n  getProfile: async () => {\r\n    const response = await api.get('/auth/profile');\r\n    return response.data;\r\n  },\r\n\r\n  updateProfile: async (userData) => {\r\n    const response = await api.put('/auth/profile', userData);\r\n    return response.data;\r\n  },\r\n\r\n  validateToken: async () => {\r\n    const response = await api.get('/auth/validate-token');\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Health API\r\nexport const healthApi = {\r\n  check: async () => {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}